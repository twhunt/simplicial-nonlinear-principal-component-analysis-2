function [cand_tri_ovrlap, exstng_tri_ovrlap] ...
    = cand_tri_overlap_1_shrd_vrtcs(...
    cand_tri_vrtx_crdnts, ...
    cand_tri_vrtx_is_shrd, ...
    vrtx_crdnts, ...
    exstng_tri_vrtx_inds, ...
    exstng_tri_shrd_vrtx_inds)


%cand_tri_vrtx_is_shrd(vrtx_i, tri_j) is true means the ith of the 
%candidate triangle is shared with a vertex of the jth triangle

num_exstng_tris = size(exstng_tri_vrtx_inds, 1);

cand_tri_ovrlap   = false(1, num_exstng_tris);
exstng_tri_ovrlap = false(1, num_exstng_tris);

cand_tri_plnr_vrtx_crdnts_loop_invrnt   = zeros(2, 3);
exstng_tri_plnr_vrtx_crdnts = zeros(2, 3);

%the ith row all_inds_minus_row is [1 2 3] with i taken out
all_inds_minus_row = [2 3; 1 3; 1 2];

for vrtx_i=1:3
    %Translate so origin is vrtx_i of candidate triangle
    
    if any(cand_tri_vrtx_is_shrd(:, vrtx_i))
        
        %translate vertices of candidate triangle so that the shared vertex
        %falls on the origin
        cand_tri_vrtx_trnsltd_crdnts = ...
            cand_tri_vrtx_crdnts(:, all_inds_minus_row(vrtx_i, :));
        
        %subtract cand_tri_vrtx_crdnts(:, vrtx_i) from each column of 
        %cand_tri_vrtx_trnsltd_crdnts
        cand_tri_vrtx_trnsltd_crdnts = ...
            bsxfun(...
            @minus, ...
            cand_tri_vrtx_trnsltd_crdnts, ...
            cand_tri_vrtx_crdnts(:, vrtx_i));
                
        
        [cand_tri_basis, cand_tri_plnr_vrtx_crdnts_loop_invrnt(:, 2:3)] ...
            = qr(cand_tri_vrtx_trnsltd_crdnts, 0);

        for tri_j=find(cand_tri_vrtx_is_shrd(:, vrtx_i))'

            tri_j_shrd_vrtx_i = find(...
                vrtx_i == exstng_tri_shrd_vrtx_inds(tri_j, :));
            
            assert(numel(tri_j_shrd_vrtx_i) == 1);
            
            exstng_tri_vrtx_trnsltd_crdnts = ...
                vrtx_crdnts(:, ...
                exstng_tri_vrtx_inds(tri_j, ...
                all_inds_minus_row(tri_j_shrd_vrtx_i, :)));

            %translate existing triangle vertices so vertex shared with
            %candidate triangle falls on the origin
            exstng_tri_vrtx_trnsltd_crdnts = ...
                bsxfun(...
                @minus, ...
                exstng_tri_vrtx_trnsltd_crdnts, ...
                cand_tri_vrtx_crdnts(:, vrtx_i));                       
            
            %Project vertices of existing triangle into subspace that
            %contains the candidate triangle
            exstng_tri_plnr_vrtx_crdnts(:, 2:3) = ...
                cand_tri_basis'*exstng_tri_vrtx_trnsltd_crdnts;

            cand_tri_ovrlap(tri_j) =  plnr_tri_tri_cnflct(...
                cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, :), ...
                cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, :), ...
                exstng_tri_plnr_vrtx_crdnts(1, :), ...
                exstng_tri_plnr_vrtx_crdnts(2, :), ...
                1, 1);
            
            %\/ PLOT DEBUG \/
            %             figure(2); subplot(1,2,1); plot_1_ce_shrd_hndl = plot(...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, [1:3, 1]), ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, [1:3, 1]), ...
            %                 'b-', ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, 1), ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, 1), ...
            %                 'bo', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'g-', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, 1), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, 1), ...
            %                 'g+');
            %             axis equal;
            %delete(plot_1shrd_hndl);
            %/\ PLOT DEBUG /\
            
            %Project vertices of candidate triangle into subspace that
            %contains the existing triangle
            
            [exstng_tri_basis, exstng_tri_plnr_vrtx_crdnts(:, 2:3)] ...
                =qr(exstng_tri_vrtx_trnsltd_crdnts, 0);
            
            cand_tri_plnr_vrtx_crdnts(:, 2:3) = ...
                exstng_tri_basis'*cand_tri_vrtx_trnsltd_crdnts;
            
            exstng_tri_ovrlap(tri_j) =  plnr_tri_tri_cnflct(...
                cand_tri_plnr_vrtx_crdnts(1, :), ...
                cand_tri_plnr_vrtx_crdnts(2, :), ...
                exstng_tri_plnr_vrtx_crdnts(1, :), ...
                exstng_tri_plnr_vrtx_crdnts(2, :), ...
                1, 1);
            
            %\/ PLOT DEBUG \/
            %             figure(2); subplot(1,2,2); plot_1_ec_shrd_hndl = plot(...
            %                 cand_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 cand_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'b-', ...
            %                 cand_tri_plnr_vrtx_crdnts(1, 1), ...
            %                 cand_tri_plnr_vrtx_crdnts(2, 1), ...
            %                 'bo', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'g-', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, 1), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, 1), ...
            %                 'g+');
            %             %title('')
            %             axis equal
            %             %pause(2)
            %             delete([plot_1_ce_shrd_hndl plot_1_ec_shrd_hndl]);
            %             figure(1)
            %/\ PLOT DEBUG /\

            
        end
    end
end
