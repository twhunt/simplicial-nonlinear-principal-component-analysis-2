function [cand_tri_ovrlap, exstng_tri_ovrlap] ...
    = cand_tri_overlap_2_shrd_vrtcs(...
    cand_tri_vrtx_crdnts, ...
    cand_tri_vrtx_is_shrd, ...
    vrtx_crdnts, ...
    exstng_tri_vrtx_inds, ...
    exstng_tri_shrd_vrtx_inds)


num_exstng_tris = size(exstng_tri_vrtx_inds, 1);

cand_tri_ovrlap   = false(1, num_exstng_tris);
exstng_tri_ovrlap = false(1, num_exstng_tris);

cand_tri_plnr_vrtx_crdnts_loop_invrnt   = zeros(2, 3);
%exstng_tri_plnr_vrtx_crdnts = zeros(2, 3);

%the ith row all_inds_minus_row is [1 2 3] with i taken out
all_inds_minus_row = [2 3; 1 3; 1 2];

%The first entries in cand_tri_plnr_shrd_inds and exstng_tri_shrd_vrtx_inds
%are always shared
cand_tri_plnr_shrd_inds   = [1, 0];
exstng_tri_plnr_shrd_inds = [1, 0];


for vrtx_i=1:2
    
    %if the candidate triangle shares vertices 1 and 2 or 1 and 3, 
    %translate so origin is vertex 1 of the candidate triangle
    %if the candidate triangele shares vertices 2 and 3, translate so
    %origin is vertex 2 of the candidate triange
    if vrtx_i == 1
        vrtx_i_is_shrd = cand_tri_vrtx_is_shrd(:, 1);
        
    
    else
        %vrtx_i is 2
        vrtx_i_is_shrd = ...
            cand_tri_vrtx_is_shrd(:, 2) & cand_tri_vrtx_is_shrd(:, 3);
    end
    
    if any(vrtx_i_is_shrd)
        
        %translate vertices of candidate triangle so that the shared vertex
        %falls on the origin
        cand_tri_vrtx_trnsltd_crdnts = ...
            cand_tri_vrtx_crdnts(:, all_inds_minus_row(vrtx_i, :));
        
        cand_tri_vrtx_trnsltd_crdnts = bsxfun(...
            @minus, ...
            cand_tri_vrtx_trnsltd_crdnts, ...
            cand_tri_vrtx_crdnts(:, vrtx_i));
                
        
        [cand_tri_basis, cand_tri_plnr_vrtx_crdnts_loop_invrnt(:, 2:3)] ...
            = qr(cand_tri_vrtx_trnsltd_crdnts, 0);

        for tri_j=find(vrtx_i_is_shrd(:))'

            exstng_tri_vrtx_list_shrd = ...
                vrtx_i == exstng_tri_shrd_vrtx_inds(tri_j, :);
            
            exstng_tri_vrtx_list_nonshrd = ~exstng_tri_vrtx_list_shrd;
            
            exstng_tri_vrtx_trnsltd_crdnts = ...
                vrtx_crdnts(:, ...
                exstng_tri_vrtx_inds(tri_j, exstng_tri_vrtx_list_nonshrd));

            exstng_tri_vrtx_trnsltd_crdnts = bsxfun(...
                @minus, ...
                exstng_tri_vrtx_trnsltd_crdnts, ...
                cand_tri_vrtx_crdnts(:, vrtx_i));
                                               
            %Project vertices of existing triangle into subspace that
            %contains the candidate triangle
            exstng_tri_plnr_vrtx_crdnts(:, 2:3) = ...
                cand_tri_basis'*exstng_tri_vrtx_trnsltd_crdnts;

            
            tmp_cand_tri_vrtx_is_shrd = ...
                cand_tri_vrtx_is_shrd(tri_j, ...
                [1:(vrtx_i-1), (vrtx_i+1):end]);
            
            assert(sum(tmp_cand_tri_vrtx_is_shrd) == 1);
            
             if(tmp_cand_tri_vrtx_is_shrd(1))
                
                 cand_tri_plnr_shrd_inds(2) = 2;
                
             else
                 %tmp_cand_tri_vrtx_is_shrd(2) is true
                 cand_tri_plnr_shrd_inds(2) = 3;
             end
                                    
             tmp_exstng_tri_shrd_vrtx_inds = ...
                 exstng_tri_shrd_vrtx_inds(tri_j, ...
                 vrtx_i ~= exstng_tri_shrd_vrtx_inds(tri_j, :));
             
             assert(numel(tmp_exstng_tri_shrd_vrtx_inds) == 2);
             
             tmp_exstng_tri_shrd_vrtx_inds_is_zero = ...
                 tmp_exstng_tri_shrd_vrtx_inds == 0;
             if tmp_exstng_tri_shrd_vrtx_inds_is_zero(1)  ...
                     && ~tmp_exstng_tri_shrd_vrtx_inds_is_zero(2)
                 
                 exstng_tri_plnr_shrd_inds(2) = 3;
                 
             elseif ~tmp_exstng_tri_shrd_vrtx_inds_is_zero(1) ...
                     && tmp_exstng_tri_shrd_vrtx_inds_is_zero(2)
                 
                 exstng_tri_plnr_shrd_inds(2) = 2;
                 
             end

             
            cand_tri_ovrlap(tri_j) =  plnr_tri_tri_cnflct(...
                cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, :), ...
                cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, :), ...
                exstng_tri_plnr_vrtx_crdnts(1, :), ...
                exstng_tri_plnr_vrtx_crdnts(2, :), ...
                cand_tri_plnr_shrd_inds, ...
                exstng_tri_plnr_shrd_inds);
            
            %\/ PLOT DEBUG \/
            %             figure(2); subplot(1,2,1); plot_2_ce_shrd_hndl = plot(...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, [1:3, 1]), ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, [1:3, 1]), ...
            %                 'b-', ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(1, cand_tri_plnr_shrd_inds), ...
            %                 cand_tri_plnr_vrtx_crdnts_loop_invrnt(2, cand_tri_plnr_shrd_inds), ...
            %                 'bo', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'g-', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, exstng_tri_plnr_shrd_inds), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, exstng_tri_plnr_shrd_inds), ...
            %                 'g+');
            %             axis equal;
            %             %delete(plot_1shrd_hndl);
            %/\ PLOT DEBUG /\

            
            %Candidate triangle 
            %warning('Non-symmetric check in 2 shared vertices case');
            
            %cand_tri_plnr_shrd_inds
            %cand_tri_plnr_vrtx_crdnts_loop_invrnt
            
            %exstng_tri_plnr_shrd_inds
            %exstng_tri_plnr_vrtx_crdnts
            
            %disp('***************')
            
            [exstng_tri_basis, exstng_tri_plnr_vrtx_crdnts(:, 2:3)] ...
                =qr(exstng_tri_vrtx_trnsltd_crdnts, 0);
            
            cand_tri_plnr_vrtx_crdnts(:, 2:3) = ...
                exstng_tri_basis'*cand_tri_vrtx_trnsltd_crdnts;

            exstng_tri_ovrlap(tri_j) =  plnr_tri_tri_cnflct(...
                cand_tri_plnr_vrtx_crdnts(1, :), ...
                cand_tri_plnr_vrtx_crdnts(2, :), ...
                exstng_tri_plnr_vrtx_crdnts(1, :), ...
                exstng_tri_plnr_vrtx_crdnts(2, :), ...
                cand_tri_plnr_shrd_inds, ...
                exstng_tri_plnr_shrd_inds);
            
            %\/ PLOT DEBUG \/
            %             figure(2); subplot(1,2,2); plot_2_ec_shrd_hndl = plot(...
            %                 cand_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 cand_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'b-', ...
            %                 cand_tri_plnr_vrtx_crdnts(1, cand_tri_plnr_shrd_inds), ...
            %                 cand_tri_plnr_vrtx_crdnts(2, cand_tri_plnr_shrd_inds), ...
            %                 'bo', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, [1:3, 1]), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, [1:3, 1]), ...
            %                 'g-', ...
            %                 exstng_tri_plnr_vrtx_crdnts(1, exstng_tri_plnr_shrd_inds), ...
            %                 exstng_tri_plnr_vrtx_crdnts(2, exstng_tri_plnr_shrd_inds), ...
            %                 'g+');
            %             %title('')
            %
            %             axis equal
            %             %pause(2)
            %             delete([plot_2_ce_shrd_hndl plot_2_ec_shrd_hndl]);
            %             figure(1)
            %/\ PLOT DEBUG /\

            
            %cand_tri_plnr_shrd_inds
            %cand_tri_plnr_vrtx_crdnts
            
            %exstng_tri_plnr_shrd_inds
            %exstng_tri_plnr_vrtx_crdnts
            
            %disp('***************')

        end
    end
end
